###
# Pulls the code from a remote Git repository, configures the web application,
# creates a virtualenv, and collects static assets
#
---
- name: ensure apt cache is up to date
  apt: update_cache=yes
  become: yes

- name: ensure web server packages are installed
  apt:
    pkg: ['git', 'python-dev', 'python-pip', 'libpq-dev', 'python-virtualenv', 'postgresql-client-common', 'postgresql-client', 'python-pil', 'python-lxml', 'python-pyproj', 'python-shapely', 'python-gdal', 'python-nose', 'python-httplib2', 'python-psycopg2', 'software-properties-common', 'gettext', 'build-essential', 'libxml2-dev', 'libxslt1-dev', 'zlib1g-dev', 'gdal-bin', 'libgeos-dev', 'libproj-dev', 'unzip', 'zip', 'libjpeg-dev', 'libpng-dev']
    state: present
  become: yes

- name: install known_hosts file to access GitHub
  copy: src=known_hosts dest={{ssh_dir}}/known_hosts

- name: check if project template already exists
  stat:
    path: "{{app_code_dir}}/{{app_name}}"
  register: app_dir

- name: checkout latest web app code
  git: repo={{code_repository}} version={{branch_name}} dest={{app_code_dir}}/{{app_name}}
  when: github_user != "GeoNode" and (app_dir.stat.isdir is not defined)

- name: check if virtualenv already exists
  stat:
    path: "{{virtualenv_dir}}/{{app_name}}"
  register: venv_dir

- name: create virtualenv for Django web application
  shell: virtualenv --system-site-packages {{virtualenv_dir}}/{{app_name}}
  when: venv_dir.stat.isdir is not defined

- name: update pip in virtualenv to latest version
  pip: name=pip
       virtualenv={{virtualenv_dir}}/{{app_name}}
       extra_args='-U'

- name: install django to initialize the geonode-project template
  pip: name=Django
       version=1.11.20
       virtualenv={{virtualenv_dir}}/{{app_name}}
  when: github_user == "GeoNode"

- name: checkout latest web app code from geonode-project {{branch_name}} branch
  shell: cd {{app_code_dir}} && {{virtualenv_dir}}/{{app_name}}/bin/django-admin.py startproject {{app_name}} --template=https://github.com/GeoNode/geonode-project/archive/{{branch_name}}.zip -e py,rst,yml -n Vagrantfile
  when: github_user == "GeoNode" and (app_dir.stat.isdir is not defined)

- name: copy the local_settings.py file in place
  template: src=local_settings.py.j2 dest={{app_code_dir}}/{{app_name}}/{{app_name}}/local_settings.py

- name: patch allowed hosts in settings.py
  shell: sed -i -e "s/ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', \['localhost', \])/ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', \['localhost', '{{ server_name }}'\])/g" {{app_code_dir}}/{{app_name}}/{{app_name}}/settings.py
  when: github_user != "GeoNode"

- name: patch hostname in settings.py
  shell: sed -i -e "s/localhost:8080/{{ server_name }}/g" {{app_code_dir}}/{{app_name}}/{{app_name}}/settings.py
  when: github_user != "GeoNode"

- name: install default geonode version {{geonode_version}}
  pip: name=geonode
       version={{geonode_version}}
       virtualenv={{virtualenv_dir}}/{{app_name}}

- name: check if requirements file exists
  stat:
    path: "{{app_code_dir}}/{{app_name}}/requirements.txt"
  register: requirements_file

- name: install web application dependencies listed in requirements.txt
  pip: requirements={{app_code_dir}}/{{app_name}}/requirements.txt virtualenv={{virtualenv_dir}}/{{app_name}}
  when: requirements_file.stat.exists

- name: install web application
  pip: name=file:///{{app_code_dir}}/{{app_name}}
       virtualenv={{virtualenv_dir}}/{{app_name}}
       extra_args='-e'

- name: create static directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/static state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/layers directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/layers/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/thumbs directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/thumbs/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/avatars directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/avatars/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/documents directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/documents/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: rename the vassals-default.ini file to the app name 
  file: src=/etc/uwsgi-emperor/vassals/vassals-default.skel dest=/etc/uwsgi-emperor/vassals/{{app_name}}.ini owner=www-data group=www-data state=link
  become: yes
  when: not apache

- name: create uwsgi log directory
  file: path=/var/log/uwsgi state=directory mode=0777 owner=www-data group=www-data
  become: yes
  when: not apache

- name: create nginx log directory
  file: path=/var/log/nginx state=directory mode=0777 owner=www-data group=www-data
  become: yes
  when: not apache

- name: make wsgi.py executable
  become: yes
  file:
    path: "{{app_code_dir}}/{{app_name}}/{{app_name}}/wsgi.py"
    mode: 0755
  when: apache

- name: create {{db_metadata_instance}} db
  postgresql_db: name={{db_metadata_instance}}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 owner={{db_user}}
                 template='template0'
  become: yes
  become_user: postgres

- name: add postgis to the {{db_metadata_instance}} db
  postgresql_ext: name=postgis db={{db_metadata_instance}}
  become: yes
  become_user: postgres

- name: create {{db_data_instance}} db
  postgresql_db: name={{db_data_instance}}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 owner={{db_user}}
                 template='template0'
  become: yes
  become_user: postgres

- name: add postgis to the {{db_data_instance}} db
  postgresql_ext: name=postgis db={{db_data_instance}}
  become: yes
  become_user: postgres

- name: make manage.py executable
  become: yes
  file:
    path: "{{app_code_dir}}/{{app_name}}/manage.py"
    mode: 0755

- name: copy geonode-project settings patch
  become: yes
  copy:
    src: settings.patch
    dest: "{{app_code_dir}}/{{app_name}}/{{app_name}}/settings.patch"
  when: github_user == "GeoNode"

- name: patch geonode-project settings file
  become: yes
  shell: cd "{{app_code_dir}}/{{app_name}}/{{app_name}}" && patch < settings.patch
  when: github_user == "GeoNode"

- name: Django makemigrations
  django_manage: command=makemigrations
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: Django migrate
  django_manage: command=migrate
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: Django collectstatic
  django_manage: command=collectstatic
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: wait for geoserver to be up
  shell: curl --head --silent http://localhost:8080/geoserver/web/
  register: result
  until: result.stdout.find('HTTP/1.1 200') != -1
  retries: 5
  delay: 60

- name: copy create_db_store script in place
  template: src=create_db_store.py.j2 dest={{app_code_dir}}/{{app_name}}/create_db_store.py

- name: create the db datastore in geoserver
  command: "{{virtualenv_dir}}/{{app_name}}/bin/python {{app_code_dir}}/{{app_name}}/create_db_store.py"

- name: copy super user fixture in place
  template: src=sample_admin.json.j2 dest={{app_code_dir}}/{{app_name}}/sample_admin.json

- name: load super user fixture
  django_manage: command="loaddata {{app_code_dir}}/{{app_name}}/sample_admin.json"
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: check if oauth configuration exists
  become: yes
  stat:
    path: /var/lib/tomcat8/webapps/geoserver/data/security/filter/geonode-oauth2/config.xml
  register: geonode_oauth_config

- name: Copy oauth fixture in place
  template: src=default_oauth_apps.json.j2 dest={{app_code_dir}}/{{app_name}}/default_oauth_apps.json
  when: geonode_oauth_config.stat.exists

- name: Load oAuth fixture
  when: geonode_oauth_config.stat.exists
  django_manage: command="loaddata {{app_code_dir}}/{{app_name}}/default_oauth_apps.json"
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings
