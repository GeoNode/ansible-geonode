###
# Pulls the code from Pypi
#
---
- name: ensure apt cache is up to date
  apt: update_cache=yes
  become: yes

- name: ensure needed packages are installed
  apt: name={{ item }}
  become: yes
  with_items:
    - rabbitmq-server
    - python-numpy

- name: check if virtualenv already exists
  stat:
    path: "{{ virtualenv_dir }}/{{ app_name }}"
  register: venv_dir

- name: create virtualenv if does not exist already
  shell: virtualenv --system-site-packages {{ virtualenv_dir }}/{{ app_name }}
  when: venv_dir.stat.isdir is not defined

- name: update pip in virtualenv to latest version
  pip: name=pip
       virtualenv={{ virtualenv_dir }}/{{ app_name }}
       extra_args='-U'

- name: install django-osgeo-importer
  pip: name=django-osgeo-importer
       version=0.1.1a3
       virtualenv={{ virtualenv_dir }}/{{ app_name }}

- name: create uploaded/osgeo_importer_uploads directory for Django app if it does not exist
  file: path=/var/www/{{ app_name }}/uploaded/osgeo_importer_uploads/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/osgeo_importer_raster directory for Django app if it does not exist
  file: path=/var/www/{{ app_name }}/uploaded/osgeo_importer_raster/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: add importer configuration to urls.py
  blockinfile:
    dest: "{{ app_code_dir }}/{{ app_name }}/{{ app_name }}/urls.py"
    insertafter: BOF
    block: |
      from osgeo_importer.urls import urlpatterns as importer_urlpatterns
      urlpatterns += importer_urlpatterns

- name: add importer configuration to settings.py
  blockinfile:
    dest: "{{ app_code_dir }}/{{ app_name }}/{{ app_name }}/settings.py"
    insertafter: BOF
    block: |
      IMPORT_HANDLERS = [
          # If GeoServer handlers are enabled, you must have an instance of geoserver running.
          # Warning: the order of the handlers here matters.
          'osgeo_importer.handlers.FieldConverterHandler',
          'osgeo_importer.handlers.geoserver.GeoserverPublishHandler',
          'osgeo_importer.handlers.geoserver.GeoserverPublishCoverageHandler',
          'osgeo_importer.handlers.geoserver.GeoServerTimeHandler',
          'osgeo_importer.handlers.geoserver.GeoWebCacheHandler',
          'osgeo_importer.handlers.geoserver.GeoServerBoundsHandler',
          'osgeo_importer.handlers.geoserver.GenericSLDHandler',
          'osgeo_importer.handlers.geonode.GeoNodePublishHandler',
          'osgeo_importer.handlers.mapproxy.publish_handler.MapProxyGPKGTilePublishHandler',
          'osgeo_importer.handlers.geoserver.GeoServerStyleHandler',
          'osgeo_importer.handlers.geonode.GeoNodeMetadataHandler'
      ]

      INSTALLED_APPS = INSTALLED_APPS + ("osgeo_importer",)

      OSGEO_DATASTORE = '{{ app_name }}'
      OSGEO_IMPORTER_GEONODE_ENABLED = True
      OSGEO_IMPORTER_VALID_EXTENSIONS = [
          'shp', 'shx', 'prj', 'dbf', 'kml', 'geojson', 'json', 'tif', 'tiff',
          'gpkg', 'csv', 'zip', 'xml', 'sld'
      ]
      LOGGING['loggers']['osgeo_importer'] = {"handlers": ["console"], "level": "DEBUG"}
      #DATABASE_ROUTERS = ['{{ app_name }}.dbrouters.DefaultOnlyMigrations']

      # # === MapProxy settings
      # # This is the location to place additional configuration files for mapproxy to work from.
      # # Currently it is only to allow tiles from gpkg files to be served.
      MAPPROXY_CONFIG_DIR = '/opt/geonode-mapproxy-config'
      # Name of the mapproxy config file to create for tile gpkg files.
      MAPPROXY_CONFIG_FILENAME = 'geonode.yaml'
      # This is the base URL for MapProxy WMS services
      # URLs will look like this: /geonode/tms/1.0.0/<layer_name>/<grid_name>/0/0/0.png and a <grid_name> will be
      # set as '<layer_name>_<projection_id>' (by conf_from_geopackage()).
      MAPPROXY_SERVER_LOCATION = 'http://localhost:8088/geonode/tms/1.0.0/{layer_name}/{grid_name}/'

      #import pyproj
      #PROJECTION_DIRECTORY = os.path.join(os.path.dirname(pyproj.__file__), 'data/')
      PROJECTION_DIRECTORY = '/tmp/'

      try:
          CELERY_IMPORTS = CELERY_IMPORTS + ('osgeo_importer.tasks',)
      except:
          CELERY_IMPORTS = ('osgeo_importer.tasks',)

      LOCKDOWN_GEONODE = True

      BROKER_URL = "amqp://guest@localhost:5672"
      CELERY_ALWAYS_EAGER = False
      IMPORT_TASK_SOFT_TIME_LIMIT = 90

- name: make manage.py executable
  become: yes
  file:
    path: "{{ app_code_dir }}/{{ app_name }}/manage.py"
    mode: '0755'

- name: run migrations to include the importer tables
  django_manage: command=migrate
                 app_path={{ app_code_dir }}/{{ app_name }}
                 virtualenv={{ virtualenv_dir }}/{{ app_name }}
                 settings={{ main_module }}.settings
