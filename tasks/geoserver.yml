###
# Install GeoServer from Custom GeoNode Build
#
---

- name: ensure apt cache is up to date
  apt: update_cache=yes
  become: yes

- name: install Tomcat
  apt: pkg={{ item }} state=present
  become: yes
  with_items:
   - tomcat8
   - unzip

- name: patch tomcat defaults
  become: yes
  lineinfile:
    dest: /etc/default/tomcat8
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: "^#?\\s*JAVA_OPTS\\s*="
      line: "JAVA_OPTS=\"-Djava.awt.headless=true -Xms{{ tomcat_xms }} -Xmx{{ tomcat_xmx }} -XX:MaxPermSize={{ tomcat_maxpermsize }} -XX:PermSize={{ tomcat_permsize }} -XX:+UseConcMarkSweepGC\""

- name: download GeoServer (remote)
  become: yes
  get_url:
    dest=/var/lib/tomcat8/webapps/geoserver.war
    url={{ gs_war_url }}
    owner=0
    group=0
    mode=0644

- name: wait for GeoServer to be unpacked
  wait_for:
    path: /var/lib/tomcat8/webapps/geoserver/data/global.xml

### oAuth setup part
- name: stopping Tomcat
  become: yes
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  service:
    name: tomcat8
    state: stopped

- name: remove default data folder if oauth2 GeoServer used
  become: yes
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  file:
    path: /var/lib/tomcat8/webapps/geoserver/data
    state: absent

- name: download oauth2 data folder (remote)
  become: yes
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  get_url:
    dest=/var/lib/tomcat8/webapps/geoserver/data.zip
    url={{ gs_data_url }}
    owner=0
    group=0
    mode=0644

- name: wait for data file to be downloaded
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  wait_for:
    path: /var/lib/tomcat8/webapps/geoserver/data.zip

- name: unzip oauth2 data folder
  become: yes
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  shell: "cd /var/lib/tomcat8/webapps/geoserver && unzip data.zip && chown -R tomcat8:tomcat8 data"

- name: remove data.zip
  become: yes
  when: gs_war_url == "http://build.geonode.org/geoserver/latest/geoserver-2.9.x-oauth2.war"
  file:
    path: /var/lib/tomcat8/webapps/geoserver/data.zip
    state: absent

- name: check if logstore file exists
  stat:
    path: /var/lib/tomcat8/webapps/geoserver/data/geogig/config/security/logstore.properties
  register: logstore_file

- name: adding sqlite logstore setting
  become: yes
  when: logstore_file.stat.exists
  lineinfile:
    dest: "/var/lib/tomcat8/webapps/geoserver/data/geogig/config/security/logstore.properties"
    regexp: "^url="
    line: "url=jdbc:sqlite://var/lib/tomcat8/webapps/geoserver/data/geogig/config/security/securitylogs.db"
    state: "present"

- name: check if geonode-oauth file exists
  stat:
    path: /var/lib/tomcat8/webapps/geoserver/data/security/filter/geonode-oauth2/config.xml
  register: geonode_oauth_file

- name: patch the geonode-oauth file (geoserver part)
  become: yes
  shell: sed -i -e "s|http://localhost:8080|http://{{ server_name }}|g" /var/lib/tomcat8/webapps/geoserver/data/security/filter/geonode-oauth2/config.xml
  when: geonode_oauth_file.stat.exists

- name: patch the geonode-oauth file (geonode part)
  become: yes
  shell: sed -i -e "s|http://localhost:8000|http://{{ server_name }}|g" /var/lib/tomcat8/webapps/geoserver/data/security/filter/geonode-oauth2/config.xml
  when: geonode_oauth_file.stat.exists

- name: patch the geonode-role file
  become: yes
  shell: sed -i -e "s|http://localhost:8000|http://{{ server_name }}|g" /var/lib/tomcat8/webapps/geoserver/data/security/role/geonode\ REST\ role\ service/config.xml
  when: geonode_oauth_file.stat.exists

- name: patch the geoserver global config file
  become: yes
  shell: sed -i -e "s|http://localhost:8080|http://{{ server_name }}|g" /var/lib/tomcat8/webapps/geoserver/data/global.xml
  when: geonode_oauth_file.stat.exists

- name: remove masterpw.info file to remove security risk warning
  become: yes
  file:
    path: /var/lib/tomcat8/webapps/geoserver/data/security/masterpw.info
    state: absent

- name: copy template users.xml
  become: yes
  become_user: root
  template:
    src: users.xml.j2
    dest: "{{ gs_users_xml }}"

- name: set digest password encoding
  become: yes
  lineinfile:
    dest: /var/lib/tomcat8/webapps/geoserver/data/security/usergroup/default/config.xml
    regexp: '\s*<passwordEncoderName>.*'
    line: '  <passwordEncoderName>digestPasswordEncoder</passwordEncoderName>'

- name: restarting Tomcat
  become: yes
  service:
    name: tomcat8
    state: restarted

- name: waiting for tomcat to bind to port 8080
  wait_for:
    port: 8080
    delay: 20

- name: waiting for geoserver to respond
  uri:
    url: "http://localhost:8080/geoserver/web/"
    status_code: 200
    timeout: 300
  #async: 300
  #poll: 10

# change root/master password
# uses admin user to authenticate, so needs to wait
- name: changing root password
  shell: "echo \"<masterPassword><oldMasterPassword>{{ gs_root_password_old }}</oldMasterPassword><newMasterPassword>{{ gs_root_password }}</newMasterPassword></masterPassword>\" | curl v -u {{ gs_admin_user }}:{{ gs_admin_password }} -XPUT -H \"Content-type: text/xml\" -d @- {{ gs_masterpw_xml }}"
  when: gs_root_password != gs_root_password_old
